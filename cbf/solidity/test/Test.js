const { expect } = require("chai");
require("hardhat-gas-reporter");

const bitsStr
const pi_a = ["0x20c0314142fb2d5a2ee9e421bb1ad007e6c11043c881c832a4ac996e788c6224", "0x0aa230800b827494e37c16aa7720d0b587954a938e92f18fe0a522b249d25651"]
const pi_b = [["0x1f5826847cf71b9072d3a7d9b50cc5415d0c9c86d52cb57449e5733272c85608", "0x26f8c8aa7ff0b622567fff2db9dcced3a4d760b5bf61ff74c431aad1e7b35bb3"], ["0x01908e2682af832396f47c48b881a76ec6f23d19f98051a2e833d7755af6c3a0", "0x09abbd27a63861b3f37af0552b76733b59a5e37889a93df6e20dc1cf1c374ee6"]]
const pi_c = ["0x00348b589998a43d44f8ce0563da5cc513d1e71f917b0f6c0d91b51a5892daef", "0x09b6f9ce95c1bc9b0db2e4e2772017c9375dccf9e4d07c04eb82e8dc0045f572"]

describe("CBF Verifier", function () {
  it("Test CBF Verifier", async function () {
    let IC_P1 = await ethers.getContractFactory("IC_P1");
    let ic_p1 = await IC_P1.deploy();

    let IC_P2 = await ethers.getContractFactory("IC_P2");
    let ic_p2 = await IC_P2.deploy();

    let IC_P3 = await ethers.getContractFactory("IC_P3");
    let ic_p3 = await IC_P3.deploy();

    let IC_P4 = await ethers.getContractFactory("IC_P4");
    let ic_p4 = await IC_P4.deploy();

    let IC_P5 = await ethers.getContractFactory("IC_P5");
    let ic_p5 = await IC_P5.deploy();

    let IC_P6 = await ethers.getContractFactory("IC_P6");
    let ic_p6 = await IC_P6.deploy();

    let IC_P7 = await ethers.getContractFactory("IC_P7");
    let ic_p7 = await IC_P7.deploy();

    let IC_P8 = await ethers.getContractFactory("IC_P8");
    let ic_p8 = await IC_P8.deploy();

    let IC_P9 = await ethers.getContractFactory("IC_P9");
    let ic_p9 = await IC_P9.deploy();

    await ic_p1.deployed();
    await ic_p2.deployed();
    await ic_p3.deployed();
    await ic_p4.deployed();
    await ic_p5.deployed();
    await ic_p6.deployed();
    await ic_p7.deployed();
    await ic_p8.deployed();
    await ic_p9.deployed();

    console.log(`ic_p1 : ${ic_p1.address}`)
    console.log(`ic_p2 : ${ic_p2.address}`)
    console.log(`ic_p3 : ${ic_p3.address}`)
    console.log(`ic_p4 : ${ic_p4.address}`)
    console.log(`ic_p5 : ${ic_p5.address}`)
    console.log(`ic_p6 : ${ic_p6.address}`)
    console.log(`ic_p7 : ${ic_p7.address}`)
    console.log(`ic_p8 : ${ic_p8.address}`)
    console.log(`ic_p9 : ${ic_p9.address}`)

    let Verifier = await ethers.getContractFactory("Verifier");
    let verifier = await Verifier.deploy([ic_p1.address, ic_p2.address, ic_p3.address, ic_p4.address, ic_p5.address, ic_p6.address, ic_p7.address, ic_p8.address, ic_p9.address]);
    await verifier.deployed();
    console.log(`verifier : ${verifier.address}`)

    let input = await verifier.stringToNumbers(bitsStr);
    console.log(`input : ${input}`);

    let res = await verifier.verifyProof_string(pi_a, pi_b, pi_c, bitsStr);
    console.log(`res : ${res}`)
    expect(res).equal(true);
  });
});
